# Definition of what is in our schema. We have retrieval of data in the query and manipulation of data in mutations.
schema {
  query: Query
  mutation: Mutation
}

type User {
  id: ID!
  name: String!
  firstname: String!
  lastname: String!
  email: String!
  password: String!
  phone: String!
  type: String!
  date_created: String!
  date_updated: String!
}

type CUserType {
  id: ID!
  role: String!
  idpermission: Int!
}

type CTableType {
  id: ID!
  name: String!
}

type CLocation {
  id: ID!
  name: String!
}

type Table {
  id: ID!
  capacity: Int!
  table_zone: String!
  table_type: String!
  table_status: String!
}

type Reservation {
  reservation_id: ID!
  reservation_date: String!
  user_id: ID!
  user_fullname: String!
  user_email: String!
  user_phone: String!
  table_id: ID!
  table_capacity: Int!
  table_zone: String!
  table_type: String!
  table_status: String!
  reservation_created: String!
  reservation_updated: String!
}

type UserResult {
  success: Boolean!
  errors: [String]
  user: User
}

type UsersResult {
  success: Boolean
  errors: [String]
  users: [User]
}

type CUserTypesResult {
  success: Boolean!
  errors: [String]
  types: [CUserType]
}

type CTableTypesResult {
  success: Boolean!
  errors: [String]
  types: [CTableType]
}

type CLocationsResult {
  success: Boolean!
  errors: [String]
  zones: [CLocation]
}

type TableResult {
  success: Boolean!
  errors: [String]
  table: Table
}

type TablesResult {
  success: Boolean
  errors: [String]
  tables: [Table]
}

type ReservationResult {
  success: Boolean!
  errors: [String]
  reservation: Reservation
}

type ReservationsResult {
  success: Boolean
  errors: [String]
  reservations: [Reservation]
}

# This acts as a definition for retrieval of data that returns the Result type that we defined just above this.
# From a REST perspective, you can think of this section as "GET" definitions.
# You can also make as many queries as you'd like, but for simplicity, a single result and multiple result were defined.
type Query {
  getUsers: UsersResult!
  getUserById(id: Int!): UserResult!
  getUserTypes: CUserTypesResult!
  getTableTypes: CTableTypesResult!
  getZones: CLocationsResult!
  getTableById(id: Int!): TableResult!
  getTables:TablesResult!
  getReservationById(id: Int!): ReservationResult!
  getReservations: ReservationsResult!
}

# This acts as data altering methods. So anything that is not a retrieval of data would be defined here.
# From a REST perspective, you can think of anything that is not "GET".
type Mutation {
  createUser(
    name: String!
    firstname: String!
    lastname: String!
    email: String!
    password: String!
    phone: String!
    type: Int!
  ): UserResult!
  updateUserById(
    id: ID!
    name: String!
    firstname: String!
    lastname: String!
    email: String!
    password: String!
    phone: String!
    type: String!
  ): UserResult!
  deleteUserById(id: ID!): UserResult!
}
